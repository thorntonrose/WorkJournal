package org.workjournal;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.table.*;
import org.javacogs.*;

/**
 * <code>WorkJournal</code> is the main class of the Work Journal application.
 *
 * <p><b>Note:</b> The UI for this application was built with JBuilder. Any
 * class that has UI components will have a method called <code>jbInit</code>
 * that initializes the components. Additionally, any section of the code that
 * has been generated by JBuilder will be marked with [JBuilder].</p>
 *
 * @author Thornton Rose
 */
public class WorkJournal extends JFrame {
   /** App. title: "Work Journal". */
   public static final String TITLE = "Work Journal";

   /** Version file: "version.properties". Loaded as class resource. */
   public static final String VERSION_PROPS_FILE = "version.properties";

   /** App. properties file: "WorkJournal.properties". */
   public static final String APP_PROPS_FILE = "WorkJournal.properties";

   /** Window properties file: "window.properties". */
   public static final String WINDOW_PROPS_FILE = "window.properties";

   private PropertiesFile verProps = new PropertiesFile();
   private PropertiesFile appProps = new PropertiesFile();
   private PropertiesFile winProps = new PropertiesFile();
   private FrameManager   frameMgr = new FrameManager();
   private Connection     connection;
   private Journal        journal;
   private ObjectProxy    entryProxy;
   private ActionListener entryFormListener;

   // UI components
   private ImageIcon newIcon = new ImageIcon("images/New.gif");
   private ImageIcon editIcon = new ImageIcon("images/Edit.gif");
   private ImageIcon deleteIcon = new ImageIcon("images/Delete.gif");
   private ImageIcon journalReportIcon = new ImageIcon("images/JournalReport.gif");
   private ImageIcon timeReportIcon = new ImageIcon("images/TimeReport.gif");
   private ImageIcon aboutIcon = new ImageIcon("images/About.gif");
   private SingleBevelBorder messageBorder = new SingleBevelBorder();
   private JournalTable journalTable = new JournalTable();

   // [JBuilder]
   private JMenuBar menuBar = new JMenuBar();
   private JMenu fileMenu = new JMenu();
   private JMenuItem newEntryMenuItem = new JMenuItem();
   private JMenuItem editEntryMenuItem = new JMenuItem();
   private JMenuItem deleteEntryMenuItem = new JMenuItem();
   private JMenuItem exitMenuItem = new JMenuItem();
   private JMenu reportsMenu = new JMenu();
   private JMenuItem timeReportMenuItem = new JMenuItem();
   private JMenuItem journalReportMenuItem = new JMenuItem();
   private JMenu helpMenu = new JMenu();
   private JMenuItem aboutMenuItem = new JMenuItem();
   private JToolBar toolBar = new JToolBar();
   private JButton newEntryButton = new JButton();
   private JButton editEntryButton = new JButton();
   private JButton deleteEntryButton = new JButton();
   private JButton journalReportButton = new JButton();
   private JButton timeReportButton = new JButton();
   private JButton aboutButton = new JButton();
   private BorderLayout frameLayout = new BorderLayout();
   private JPanel mainPanel = new JPanel();
   private JScrollPane tableScrollPane = new JScrollPane();
   private BorderLayout mainLayout = new BorderLayout();
   private JPanel statusPanel = new JPanel();
   private JPanel messagePanel = new JPanel();
   private JLabel messageLabel = new JLabel();
   private BorderLayout statusLayout = new BorderLayout();
   private BorderLayout messageLayout = new BorderLayout();

   //--------------------------------------------------------------------------

   /**
    * Construct a WorkJournal.
    */
   public WorkJournal() {
      try {
         // Load the properties files.
         loadProperties();

         // Connect to the database.
         openConnection();

         // Create the journal and load it.
         journal = new Journal(connection);
         journal.load();

         // Initialize the UI.
         jbInit();
         journalTable.setModel(new JournalTableModel(journal));
         addListeners();

         // Set the frame size to the last saved size. If the dimensions are
         // not valid, use the dimesions set in jbInit() will be unaffected.
         try {
            setSize(winProps.getInt("width"), winProps.getInt("height"));
         } catch(NumberFormatException ex) {
            // Don't need to report this.
         }

         // Set the frame location to the last saved position. If the position
         // is not valid, center the frame on the screen.
         try {
            setLocation(winProps.getInt("left"), winProps.getInt("top"));
         } catch(NumberFormatException ex) {
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            setLocation(
               (screenSize.width - getSize().width) / 2,
               ((screenSize.height - getSize().height) / 2) - 20);
         }

         // Show table controls and record count.
         showTableControls();
         showCount();
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.<init>", ex);
         closeConnection();
         System.exit(0);
      }
   }

   //--------------------------------------------------------------------------

   /**
    * Initialize UI [JBuilder].
    */
   private void jbInit() {
      this.setTitle(TITLE);
      this.setSize(new Dimension(600, 480));

      newEntryMenuItem.setText("New Entry");
      newEntryMenuItem.setMnemonic('N');

      editEntryMenuItem.setText("Edit Entry");
      editEntryMenuItem.setAccelerator(
         javax.swing.KeyStroke.getKeyStroke(10, 0, false));
      editEntryMenuItem.setMnemonic('E');

      deleteEntryMenuItem.setText("Delete Entry");
      deleteEntryMenuItem.setAccelerator(
         javax.swing.KeyStroke.getKeyStroke(127, 0, false));
      deleteEntryMenuItem.setMnemonic('D');

      exitMenuItem.setText("Exit");
      exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(115,
            java.awt.event.KeyEvent.ALT_MASK, false));
      exitMenuItem.setMnemonic('X');

      fileMenu.setText("File");
      fileMenu.setMnemonic('F');
      fileMenu.add(newEntryMenuItem);
      fileMenu.add(editEntryMenuItem);
      fileMenu.add(deleteEntryMenuItem);
      fileMenu.addSeparator();
      fileMenu.add(exitMenuItem);

      journalReportMenuItem.setText("Journal Report");
      journalReportMenuItem.setMnemonic('J');

      timeReportMenuItem.setText("Time Report");
      timeReportMenuItem.setMnemonic('T');

      reportsMenu.setText("Reports");
      reportsMenu.setMnemonic('R');
      reportsMenu.add(journalReportMenuItem);
      reportsMenu.add(timeReportMenuItem);

      aboutMenuItem.setText("About");
      aboutMenuItem.setMnemonic('A');

      helpMenu.setText("Help");
      helpMenu.setMnemonic('H');
      helpMenu.add(aboutMenuItem);

      menuBar.add(fileMenu);
      menuBar.add(reportsMenu);
      menuBar.add(helpMenu);

      newEntryButton.setToolTipText("New Entry");
      newEntryButton.setIcon(newIcon);

      editEntryButton.setToolTipText("Edit Entry");
      editEntryButton.setIcon(editIcon);

      deleteEntryButton.setToolTipText("Delete Entry");
      deleteEntryButton.setIcon(deleteIcon);

      journalReportButton.setToolTipText("Journal Report");
      journalReportButton.setIcon(journalReportIcon);

      timeReportButton.setToolTipText("Time Report");
      timeReportButton.setIcon(timeReportIcon);

      aboutButton.setToolTipText("About");
      aboutButton.setIcon(aboutIcon);

      toolBar.setFloatable(false);
      toolBar.add(newEntryButton, null);
      toolBar.add(editEntryButton, null);
      toolBar.add(deleteEntryButton, null);
      toolBar.addSeparator();
      toolBar.add(journalReportButton, null);
      toolBar.add(timeReportButton, null);
      toolBar.addSeparator();
      toolBar.add(aboutButton, null);

      journalTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

      tableScrollPane.setVerticalScrollBarPolicy(
         JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
      tableScrollPane.getViewport().add(journalTable, null);

      messageLabel.setFont(new java.awt.Font("Dialog", Font.BOLD, 11));

      messagePanel.setLayout(messageLayout);
      messagePanel.setBorder(messageBorder);
      messagePanel.setPreferredSize(new Dimension(10, 16));
      messagePanel.add(messageLabel, BorderLayout.CENTER);

      statusPanel.setLayout(statusLayout);
      statusPanel.setPreferredSize(new Dimension(229, 16));
      statusPanel.add(messagePanel, BorderLayout.CENTER);

      mainLayout.setVgap(2);

      mainPanel.setLayout(mainLayout);
      mainPanel.add(tableScrollPane, BorderLayout.CENTER);
      mainPanel.add(statusPanel, BorderLayout.SOUTH);

      this.setJMenuBar(menuBar);
      this.getContentPane().setLayout(frameLayout);
      this.getContentPane().add(toolBar, BorderLayout.NORTH);
      this.getContentPane().add(mainPanel, BorderLayout.CENTER);
   }

   /**
    * Add listeners to UI components.
    */
   private void addListeners() {
      ActionListener l = null;

      // Add listener to window.
      addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent event) {
            exit();
         }
      });

      // Add listener to New Entry menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            newEntry();
         }
      };
      newEntryMenuItem.addActionListener(l);
      newEntryButton.addActionListener(l);

      // Add listener to Edit Entry menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            editEntry();
         }
      };
      editEntryMenuItem.addActionListener(l);
      editEntryButton.addActionListener(l);

      // Add listener to Delete Entry menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            deleteEntry();
         }
      };
      deleteEntryMenuItem.addActionListener(l);
      deleteEntryButton.addActionListener(l);

      // Add listener to Journal Report menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            showReport(JournalReport.class);
         }
      };
      journalReportMenuItem.addActionListener(l);
      journalReportButton.addActionListener(l);

      // Add listener to Time Report menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            showReport(TimeReport.class);
         }
      };
      timeReportMenuItem.addActionListener(l);
      timeReportButton.addActionListener(l);

      // Add listener to Exit menu item.
      exitMenuItem.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            exit();
         }
      });

      // Add listener to About menu item and button.
      l = new ActionListener() {
         public void actionPerformed(ActionEvent event) {
            showAbout();
         }
      };
      aboutMenuItem.addActionListener(l);
      aboutButton.addActionListener(l);

      // Add listener to journal table to edit entry on double-click.
      journalTable.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent event) {
            if (event.getClickCount() == 2) {
               editEntry();
            }
         }
      });

      // Add listener to journal table selection model to show controls when
      // an entry is selected.
      journalTable.getSelectionModel().addListSelectionListener(
         new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
               if (! event.getValueIsAdjusting()) {
                  showTableControls();
               }
            }
         }
      );
   }

   //--------------------------------------------------------------------------

   /**
    * Get the application version.
    */
   public String getVersion() {
      return this.verProps.getString("version");
   }

   /**
    * Show application information.
    */
   private void showAbout() {
      MessageDialog.showInfo(this, "About", TITLE + " " + getVersion()
         + "\nCopyright (c) 2001, Thornton Rose");
   }

   /**
    * Show (enable/disable) the controls that are appropriate for on the state
    * of the table. If a row is selected in the table, the edit and delete
    * buttons and menu items are enabled.
    */
   private void showTableControls() {
      boolean rowIsSelected = (journalTable.getSelectedRow() >= 0);
      editEntryButton.setEnabled(rowIsSelected);
      deleteEntryButton.setEnabled(rowIsSelected);
      editEntryMenuItem.setEnabled(rowIsSelected);
      deleteEntryMenuItem.setEnabled(rowIsSelected);
   }

   /**
    * Show the journal record count.
    */
   private void showCount() {
      int count = journal.count();
      messageLabel.setText(" " + count + " record" + (count == 1 ? "" : "s"));
   }

   /**
    * Refresh the journal table, show the record count, and show the table
    * controls.
    */
   private void refresh() {
      journalTable.refresh();
      showCount();
      showTableControls();
   }

   /**
    * Close everything and exit.
    */
   private void exit() {
      closeConnection();
      saveProperties();
      System.exit(0);
   }

   //--------------------------------------------------------------------------
   // Database connection
   //--------------------------------------------------------------------------

   /**
    * Open the database connection.
    */
   private void openConnection() {
      try {
         // Get database properties.
         String driver = appProps.getProperty("db.driver", "");
         String url    = appProps.getProperty("db.url", "");
         String user   = appProps.getProperty("db.user", "");
         String passwd = appProps.getProperty("db.passwd", "");

         // Connect to the database.
         Class.forName(driver);
         connection = DriverManager.getConnection(url, user, passwd);
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.openConnection", ex);
      }
   }

   /**
    * Close the database connection.
    */
   private void closeConnection() {
      if (connection != null) {
         try {
            connection.close();
         } catch(Exception ex) {
            MessageDialog.showError(this, "WorkJournal.closeConnection", ex);
         }
      }
   }

   //--------------------------------------------------------------------------
   // Properties files
   //--------------------------------------------------------------------------

   /**
    * Load the properties files.
    */
   private void loadProperties() {
      try {
         // Version properties.
         verProps.loadAsResource(getClass(), VERSION_PROPS_FILE);

         // App. properties.
         appProps.load(APP_PROPS_FILE);

         // Window properties.
         try {
            winProps.load(WINDOW_PROPS_FILE);
         } catch(Exception ex) {
            // nop
         }
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.loadProperties", ex);
      }
   }

   /**
    * Save the properties.
    */
   private void saveProperties() {
      try {
         // Save window properties -- location and dimensions.
         winProps.setInt("left", this.getX());
         winProps.setInt("top", this.getY());
         winProps.setInt("width", this.getWidth());
         winProps.setInt("height", this.getHeight());

         // Store file.
         winProps.store(WINDOW_PROPS_FILE);
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.saveProperties", ex);
      }
   }

   //--------------------------------------------------------------------------
   // Journal entries
   //--------------------------------------------------------------------------

   /**
    * Enter a new journal entry.
    */
   private void newEntry() {
      try {
         // Create a journal entry and point the proxy at it.
         JournalEntry entry = new JournalEntry();
         ObjectProxy proxy = getEntryProxy();
         proxy.setTarget(entry);

         // Get app. property names.
         Enumeration keys = appProps.keys();

         // Iterate through the property names.
         while (keys.hasMoreElements()) {
            // Get the property key.
            String key = (String) keys.nextElement();

            // If key starts with "entry.", but is not "entry.id", use it to set
            // the entry attribute.
            if (key.startsWith("entry.") && (! key.equals("entry.id"))) {
               String name = key.substring(key.indexOf('.') + 1);
               String val = appProps.getProperty(key);

               try {
                  proxy.set(name, val);
               } catch(Exception ex) {
                  MessageDialog.showError(this, "WorkJournal.newEntry", ex);
               }
            }
         }

         // Show the entry.
         showEntry(entry);
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.newEntry", ex);
      }
   }

   /**
    * Edit the selected journal entry.
    */
   private void editEntry() {
      try {
         // Get the selected row.
         int index = journalTable.getSelectedRow();

         // If a row is selected, get the journal entry and show it.
         if (index >= 0) {
            JournalEntry entry = journal.get(index);
            showEntry(entry);
         }
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.editEntry", ex);
      }
   }

   /**
    * Delete the selected journal entry.
    */
   private void deleteEntry() {
      try {
         // Get the selected row index.
         int index = journalTable.getSelectedRow();

         // If a row is selected, confirm deletion.
         if (index >= 0) {
            // Present confirmation dialog.
            int answer = ConfirmDialog.show(this,
               "Delete the selected journal entry?");

            // If the user answered yes, delete the selected journal entry.
            if (answer == JOptionPane.YES_OPTION) {
               JournalEntry entry = journal.get(index);
               journal.delete(entry);
               // ???: Check for open entry form?
            }
         }

         refresh();
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.deleteEntry", ex);
      }
   }

   /**
    * Show the given journal entry.
    */
   private void showEntry(JournalEntry entry) {
      // Get the form key.
      Object key = entry.toString();

      // If the form is not registered, create and register it.
      if (! frameMgr.isRegistered(key)) {
         JournalEntryForm form = new JournalEntryForm(journal, entry);
         form.addListener(getEntryFormListener());
         frameMgr.register(key, form);
      }

      // Show the form.
      frameMgr.show(key);
   }

   /**
    * Get the journal entry proxy.
    */
   public ObjectProxy getEntryProxy() throws IntrospectionException {
      if (entryProxy == null) {
         entryProxy = new ObjectProxy(JournalEntry.class);
      }

      return entryProxy;
   }

   /**
    * Get the entry form listener.
    */
   private ActionListener getEntryFormListener() {
      if (entryFormListener == null) {
         entryFormListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               if (e.getID() == JournalEntryForm.SAVE) {
                  refresh();
               }
            }
         };
      }

      return entryFormListener;
   }

   //--------------------------------------------------------------------------
   // Reports
   //--------------------------------------------------------------------------

   /**
    * Show the report for the given class.
    */
   private void showReport(Class repClass) {
      try {
         // Get key for report viewer.
         Object key = repClass.toString();

         // If report viewer is not registered, create and register it.
         if (! frameMgr.isRegistered(key)) {
            frameMgr.register(key, new ReportViewer(journal,
               (Report) repClass.newInstance()));
         }

         // Show the form.
         frameMgr.show(key);
      } catch(Exception ex) {
         MessageDialog.showError(this, "WorkJournal.showReport", ex);
      }
   }

   //--------------------------------------------------------------------------
   // main
   //--------------------------------------------------------------------------

   /**
    * Run the application.
    */
   public static void main(String[] args) {
      WorkJournal wj = new WorkJournal();
      wj.show();
   }
}
